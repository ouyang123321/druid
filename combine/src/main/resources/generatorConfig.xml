<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <!-- 引入配置文件 导入属性配置 -->
    <properties resource="jdbc.properties"/>


    <!--数据库驱动 此处单双斜杠都OK -->
    <classPathEntry
            location="D:\\repository\\mvn\\mysql\\mysql-connector-java\\5.1.44\\mysql-connector-java-5.1.44.jar"/>

    <!-- 一个数据库一个context -->
    <context id="DB2Tables"><!--   targetRuntime="MyBatis3"-->

        <!-- optional，旨在创建class时，对 注释 进行控制 -->
        <commentGenerator>
            <property name="suppressDate" value="true"/><!--是否生成注释代时间戳-->
            <property name="suppressAllComments" value="true"/><!--是否取消注释-->
        </commentGenerator>

        <!--数据库链接地址账号密码-->
        <!--jdbc的数据库连接 -->
        <jdbcConnection
                driverClass="${jdbc.driver}"
                connectionURL="${jdbc.url}"
                userId="${jdbc.username}"
                password="${jdbc.password}">
        </jdbcConnection>

        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/><!--是否使用bigDecimals，false可以转换为以下类型(Long,Integer,Short,etc.)-->
        </javaTypeResolver>

        <!-- 01 指定JavaBean生成的位置  生成Model类存放位置 -->
        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
        -->
        <javaModelGenerator targetPackage="com.tlzx.combine.model" targetProject="src/main/java">
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/><!--true  or  false-->
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>
            <!-- 是否对类STRING,CHAR类型的列的数据在set的时候进行trim操作 -->
            <property name="trimStrings" value="false"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!--02 指定SQL生成映射文件存放位置-->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <property name="enableSubPackages" value="false"/><!--是否允许子包-->
        </sqlMapGenerator>

        <!--03 生成XxxMapper接口存放位置-->
        <!-- type="XMLMAPPER"，生成SQLMAP XML文件和独立的mapper接口
             type="MIXEDMAPPER"，生成基于注解的Java model 和相对应的mapper接口
             type="ANNOTATEDMAPPER"，生成Java model 和基于注解的mapper对象 -->
        <javaClientGenerator targetPackage="com.tlzx.combine.mapper" targetProject="src/main/java" type="XMLMAPPER">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <!--是否在当前的路径下新加一层schema   false路径:com.oop.eksp.user.model  true路径:com.oop.eksp.user.model.[schemaName] -->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>



        <!--配置表信息 对应的数据库表及model中生成的类名-->
        <!-- schema：数据库名
             tableName：对应的数据库表
             domainObjectName：要生成的实体类
             enable*ByExample：是否生成example类-->
        <!--<table schema="" tableName="tlzx_user" domainObjectName="User"
               enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false">
        </table>-->
        <table schema="" tableName="request_data" domainObjectName="RequestData"
               enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false">
        </table>

    </context>
</generatorConfiguration>