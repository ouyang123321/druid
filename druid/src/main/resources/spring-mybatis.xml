<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--1. 注解式开发 -->
    <!--1) 注解驱动  annotation注解-->
    <context:annotation-config/>
    <!--2) 用注解方式注入bean，并指定查找范围：com.tlzx.oa及子子孙孙包-->
    <context:component-scan base-package="com.tlzx"/>
    <!--TODO 后期springmvc有变化   扫描spring （不能访问springmvc中的controller）上下文（除了springmvc可以访问spring中的service层由上至下访问）-->
    <context:component-scan base-package="com.tlzx" use-default-filters="true">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 已在spring.xml中配置，只能引入一次 -->
    <!--2. 引入外置jdbc配置文件 -->
    <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/>
    </bean>-->

    <!--3. dbcp2数据库连接池配置-->
    <!--<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        &lt;!&ndash;初始连接数&ndash;&gt;
        <property name="initialSize" value="10"/>
        &lt;!&ndash;最大活动连接数&ndash;&gt;
        <property name="maxTotal" value="100"/>
        &lt;!&ndash;最大空闲连接数&ndash;&gt;
        <property name="maxIdle" value="50"/>
        &lt;!&ndash;最小空闲连接数&ndash;&gt;
        <property name="minIdle" value="10"/>
        &lt;!&ndash;设置为-1时，如果没有可用连接，连接池会一直无限期等待，直到获取到连接为止。&ndash;&gt;
        &lt;!&ndash;如果设置为N（毫秒），则连接池会等待N毫秒，等待不到，则抛出异常&ndash;&gt;
        <property name="maxWaitMillis" value="-1"/>
    </bean>-->

    <!-- 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="clone">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <!-- 通常来说，只需要修改initialSize、minIdle、maxActive -->
        <!-- 初始化时建立物理连接的个数，缺省值为0 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <!-- 最小连接池数量 -->
        <property name="minIdle" value="${druid.minIdle}"/>
        <!-- 最大连接池数量，缺省值为8 -->
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 添加此处作用是为了在SQL监控页面显示sql执行语句，不配置不显示 -->
        <property name="filters" value="${druid.filters}" />
    </bean>



    <!--4. spring和MyBatis整合 -->
    <!--1) 创建sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 指定mybatis核心配置文件 -->
        <property name="configLocation" value="classpath:mybatis.cfg.xml"/>
        <!-- 自动扫描XxxMapping.xml文件，**任意路径 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!-- 指定别名 -->
        <property name="typeAliasesPackage" value="com.tlzx.model"/>
    </bean>
    <!--2) 自动扫描com/tlzx/oa/**/mapper下的所有XxxMapper接口(其实就是DAO接口)，并实现这些接口，-->
    <!--   即可直接在程序中使用dao接口，不用再获取sqlsession对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--basePackage 属性是映射器接口文件的包路径。-->
        <!--你可以使用分号或逗号 作为分隔符设置多于一个的包路径-->
        <property name="basePackage" value="com/tlzx/**/mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--5. 注解式事务配置开始 -->
    <!--1) 事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--2) 开启事务注解 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

<!---->
    <!-- 注解式事务配置结束 -->

    <!--6) 开启自动代理 -->
    <aop:aspectj-autoproxy/>
</beans>